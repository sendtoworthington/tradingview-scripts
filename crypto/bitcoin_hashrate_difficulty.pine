//@version=4
study(title="My:BITCOIN_HASHRATE_DIFFICULTY", shorttitle="MBHD")

//////////////////////
// Hashrate
//////////////////////

hashrate = security("QUANDL:BCHAIN/HRATE", "D", close, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on) / 10000000
previousHashrate = security("QUANDL:BCHAIN/HRATE", "D", close[1], gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on) / 10000000
previous7Hashrate = security("QUANDL:BCHAIN/HRATE", "D", close[7], gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on) / 10000000
previous30Hashrate = security("QUANDL:BCHAIN/HRATE", "D", close[30], gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on) / 10000000
hashrate_mean_7 = security("QUANDL:BCHAIN/HRATE", "D", sma(close, 30), gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on) / 10000000
hashrate_mean_21 = security("QUANDL:BCHAIN/HRATE", "D", sma(close, 60),gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on) / 10000000

hashrate_plot = plot(hashrate, "Hashrate", style=plot.style_line, color=color.teal)
hashrate_mean_7_plot = plot(hashrate_mean_7, "Hashrate Mean 30", color=color.new(color.gray, 100), style=plot.style_line)
hashrate_mean_21_plot = plot(hashrate_mean_21, style=plot.style_line, color=color.new(color.gray, 100), title='Hashrate Mean 60')
fill(hashrate_mean_21_plot, hashrate_mean_7_plot, color=hashrate_mean_21 < hashrate_mean_7 ? color.new(color.green, 85) : color.new(color.red, 85))

hashrateDailyChange = (hashrate - previousHashrate) / previousHashrate * 100
hashrateDailyChangePositive = hashrateDailyChange > 0 ? '+' : ''
hashrate7Change = (hashrate - previous7Hashrate) / previous7Hashrate * 100
hashrateSevenDayChangePositive = hashrate7Change > 0 ? '+' : ''
hashrate30Change = (hashrate - previous30Hashrate) / previous30Hashrate * 100
hashrateThirtyDayChangePositive = hashrate30Change > 0 ? '+' : ''

hashrateLabelText = '  -- Hashrate --  \n'
hashrateLabelText := hashrateLabelText + '1 Day : ' + hashrateDailyChangePositive + tostring(hashrateDailyChange, '#.#') + '%\n'
hashrateLabelText := hashrateLabelText + '7 Days : ' + hashrateSevenDayChangePositive + tostring(hashrate7Change, '#.#') + '%\n'
hashrateLabelText := hashrateLabelText + '30 Days : ' + hashrateThirtyDayChangePositive + tostring(hashrate30Change, '#.#') + '%'
hashrateLabel_xloc = time_close + (( time_close - time_close[1] ) * 6 )
hashrateLabel = label.new(hashrateLabel_xloc, hashrate, hashrateLabelText , xloc.bar_time, yloc.price, color=color.teal, style=label.style_label_left, textcolor=color.white, size=size.normal )
label.delete( hashrateLabel[1] )

//
//
//
// HR on TV only has "yesterday's" value --> use "lookahead_on" when running live (on current bar), to pull forward yesterdays data
live_HR_raw = security("QUANDL:BCHAIN/HRATE", "D", close,gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
live_HR_short = security("QUANDL:BCHAIN/HRATE", "D", sma(close,30),gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
live_HR_long = security("QUANDL:BCHAIN/HRATE", "D", sma(close,60),gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on) 

hist_HR_raw = security("QUANDL:BCHAIN/HRATE", "D", close,gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_off)
hist_HR_short = security("QUANDL:BCHAIN/HRATE", "D", sma(close,30),gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_off) 
hist_HR_long = security("QUANDL:BCHAIN/HRATE", "D", sma(close,60),gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_off) 

daily_s10 = security(syminfo.tickerid, "D", sma(close,10),gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_off) 
daily_s20 = security(syminfo.tickerid, "D", sma(close,20),gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_off) 


// DAILY TIMEFRAME MGMT

is_newbar(res) =>
    t = time(res) // res calculated below \/
    change(t) != 0 ? true : false

// Check how many bars are in our upper (otf) timeframe
since_new_bar = barssince(is_newbar("D")) //1-360 for minutes, D = Daily, W = Weekly, M = Monthly
D_total_bars = int(na)
D_total_bars := since_new_bar == 0 ? since_new_bar[1] : D_total_bars[1] // calculates the total number of current time frame bars in the OTF 

// INDICATORS

HR_short = float(na)
HR_long = float(na)
HR_raw = float(na)
s10 = float(na) 
s20 = float(na)

HR_short := barstate.isrealtime ? live_HR_short : hist_HR_short 
HR_long := barstate.isrealtime ? live_HR_long : hist_HR_long 
HR_raw := barstate.isrealtime ? live_HR_raw : hist_HR_raw 

s10 := barstate.isrealtime ? (since_new_bar == D_total_bars ? daily_s10 : s10[1]) : daily_s10
s20 := barstate.isrealtime ? (since_new_bar == D_total_bars ? daily_s20 : s20[1]) : daily_s20

capitulation = crossunder(HR_short,HR_long)
miner_capitulation = HR_short<HR_long 
recovering = HR_short > HR_short[1] and HR_short > HR_short[2] and HR_short > HR_short[3] and miner_capitulation
recovered = crossover(HR_short,HR_long)

// HASH BOTTOM + PA SIGNAL

buy = false
buy := (
     (crossover(s10,s20) and barssince(recovered) < barssince(crossunder(s10,s20)) and barssince(recovered) < barssince(capitulation)) 
     or 
     (s10>s20 and crossover(HR_short,HR_long))
     )

plotshape(buy,style=shape.circle,location=location.top,color=color.green,size=size.tiny,title='Buy')
halving_1 = timestamp(2012,11,28,0,0)
halving_2 = timestamp(2016,7,9,0,0)
halving_3 = timestamp(2020,5,11,0,0)
halving_4 = timestamp(2024,3,25,0,0) // projected! https://www.bitcoinclock.com/
band = 2
h1_range = time >= halving_1 - band*(24*60*60*1000) and time <= halving_1 + band*(24*60*60*1000) //adds 3 day either side for chart visibility
h2_range = time >= halving_2 - band*(24*60*60*1000) and time <= halving_2 + band*(24*60*60*1000) //adds 3 day either side for chart visibility
h3_range = time >= halving_3 - band*(24*60*60*1000) and time <= halving_3 + band*(24*60*60*1000) //adds 3 day either side for chart visibility
h4_range = time >= halving_4 - band*(24*60*60*1000) and time <= halving_4 + band*(24*60*60*1000) //adds 3 day either side for chart visibility
bgcolor(h1_range ? color.red : na, transp = 20)
bgcolor(h2_range ? color.red : na, transp = 20)
bgcolor(h3_range ? color.red : na, transp = 20)
bgcolor(h4_range ? color.red : na, transp = 20)
//
//
//

//////////////////////
// Difficulty
//////////////////////

difficulty = security("QUANDL:BCHAIN/DIFF","D", close, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on) / 1010000000000
previousDifficulty = security("QUANDL:BCHAIN/DIFF","D", close[1], gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on) / 1010000000000
previous7Difficulty = security("QUANDL:BCHAIN/DIFF","D", close[7], gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on) / 1010000000000
previous30Difficulty = security("QUANDL:BCHAIN/DIFF","D", close[30], gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on) / 1010000000000

difficulty_plot = plot(difficulty, "Difficulty", color=#EAEAEA, style=plot.style_line, linewidth=3)

difficultyDailyChange = (difficulty - previousDifficulty) / previousDifficulty * 100
dailyChangePositive = difficultyDailyChange > 0 ? '+' : ''
difficulty7Change = (difficulty - previous7Difficulty) / previous7Difficulty * 100
sevenDayChangePositive = difficulty7Change > 0 ? '+' : ''
difficulty30Change = (difficulty - previous30Difficulty) / previous30Difficulty * 100
thirtyDayChangePositive = difficulty30Change > 0 ? '+' : ''

difficultyLabelText = '  -- Difficulty --  \n'
difficultyLabelText := difficultyLabelText + '1 Day : ' + dailyChangePositive + tostring(difficultyDailyChange, '#.#') + '%\n'
difficultyLabelText := difficultyLabelText + '7 Days : ' + sevenDayChangePositive + tostring(difficulty7Change, '#.#') + '%\n'
difficultyLabelText := difficultyLabelText + '30 Days : ' + thirtyDayChangePositive + tostring(difficulty30Change, '#.#') + '%'
difficultyLabel_xloc = time_close + (( time_close - time_close[1] ) * 6 )
difficultyLabel = label.new(difficultyLabel_xloc, difficulty, difficultyLabelText , xloc.bar_time, yloc.price, color=color.teal, style=label.style_label_left, textcolor=color.white, size=size.normal )
label.delete( difficultyLabel[1] )



